#para el calculo de los valors propios, se impota lo necesario
from scipy.optimize import fsolve
import math
import sympy as sp
from sympy import *
import numpy as np
from sympy.solvers import solve
from sympy import Symbol
from scipy.optimize import fsolve
from scipy import linalg

#Primero se evalua el jacobiano en los puntos de equlibrio y se asigna 
el nombre matrix1 a esto. 

matrix1 = F.jacobian([x,y,z]).subs(([x,0],[y,0.9721],[z,0.9433]))
print (matrix1)
Matrix([[0.0990842406800000, 0, 0],
[-0.0550000000000000, -0.821454000000000, -0.0250000000000000], 
[-0.0180000000000000, 0.794213376843181, -0.818449747968316]])

#al obtener la matriz evaluada se procede con el calculo de los valores propios
#se crea una nueva array con los valores obtenidos en el punto anterio y se utiliza el c√≥digo 
#de la libreria de Scipy Linalg.eigvals.

ma1 = np.array([[0.0990842406800000, 0, 0],
[-0.0550000000000000, -0.821454000000000, -0.0250000000000000], 
[-0.0180000000000000, 0.794213376843181, -0.818449747968316]])
ma1eig = linalg.eigvals(ma1)
print (ma1eig)

#obteniendo los valores propios.
[-0.81995187+0.14090095j -0.81995187-0.14090095j  0.09908424+0.j ]

# para el resto de matrices se repite el proceso.
